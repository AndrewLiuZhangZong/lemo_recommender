apiVersion: apps/v1
kind: Deployment
metadata:
  name: lemo-service-recommender-consumer
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender
    component: consumer
    environment: dev
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: lemo-service-recommender
      component: consumer
      environment: dev
  template:
    metadata:
      labels:
        app: lemo-service-recommender
        component: consumer
        environment: dev
    spec:
      serviceAccountName: lemo-service-recommender-sa
      imagePullSecrets:
      - name: regcred
      containers:
      - name: recommender-consumer
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        command: ["python3", "-m", "app.services.item.kafka_consumer"]
        env:
        - name: APP_ENV
          value: "prod"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: lemo-service-recommender-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "300m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # 检查 Consumer 进程是否存在
              ps aux | grep -v grep | grep kafka_consumer > /dev/null
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # 检查进程存在即可（Kafka 连接由 liveness 检查）
              ps aux | grep -v grep | grep kafka_consumer > /dev/null
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5

