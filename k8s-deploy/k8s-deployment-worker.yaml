apiVersion: v1
kind: ConfigMap
metadata:
  name: lemo-service-recommender-config
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender-worker
    environment: dev
data:
  # Application
  ENV: "prod"
  LOG_LEVEL: "INFO"
  
  # MongoDB (外网服务器)
  MONGODB_URL: "mongodb://lemo_user:lemo_password_2024@111.228.39.41:27017/lemo_recommender"
  MONGODB_DATABASE: "lemo_recommender"
  
  # Redis (外网服务器)
  REDIS_URL: "redis://:redis_password_2024@111.228.39.41:6379/0"
  
  # Celery (使用 Redis)
  CELERY_BROKER_URL: "redis://:redis_password_2024@111.228.39.41:6379/1"
  CELERY_RESULT_BACKEND: "redis://:redis_password_2024@111.228.39.41:6379/2"
  
  # Kafka (外网服务器)
  KAFKA_BOOTSTRAP_SERVERS: "111.228.39.41:9092"
  KAFKA_ITEM_INGEST_TOPICS: '["items-ingest","vlog-items","news-items"]'
  
  # Milvus (外网服务器)
  MILVUS_HOST: "111.228.39.41"
  MILVUS_PORT: "19530"
  
  # MinIO (外网服务器 - 如果需要)
  MINIO_ENDPOINT: "111.228.39.41:9000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin"
  
  # Etcd (外网服务器 - 如果需要)
  ETCD_ENDPOINTS: "111.228.39.41:2379"
  
  # Prometheus
  PROMETHEUS_PORT: "9090"
  
  # API Server
  HTTP_HOST: "0.0.0.0"
  HTTP_PORT: "10071"
  
  # gRPC Server
  GRPC_HOST: "0.0.0.0"
  GRPC_PORT: "10072"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lemo-service-recommender-worker
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender-worker
    environment: dev
spec:
  replicas: 1  # 降低副本数以节省资源
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: lemo-service-recommender-worker
      environment: dev
  template:
    metadata:
      labels:
        app: lemo-service-recommender-worker
        environment: dev
    spec:
      serviceAccountName: lemo-service-recommender-worker-sa
      imagePullSecrets:
      - name: regcred
      containers:
      - name: recommender-worker
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-c", "4", "-Q", "default,model_training,item_processing,user_profile"]
        env:
        - name: APP_ENV
          value: "prod"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: lemo-service-recommender-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - python3
            - -c
            - |
              import psutil, sys
              for proc in psutil.process_iter(['cmdline']):
                  cmdline = ' '.join(proc.info.get('cmdline') or [])
                  if 'celery' in cmdline and 'worker' in cmdline:
                      sys.exit(0)
              sys.exit(1)
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python3
            - -c
            - |
              import psutil, sys
              for proc in psutil.process_iter(['cmdline']):
                  cmdline = ' '.join(proc.info.get('cmdline') or [])
                  if 'celery' in cmdline and 'worker' in cmdline:
                      sys.exit(0)
              sys.exit(1)
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lemo-service-recommender-worker-sa
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender-worker
    environment: dev
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: lemo-service-recommender-worker-role
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender-worker
    environment: dev
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: lemo-service-recommender-worker-rolebinding
  namespace: lemo-dev
  labels:
    app: lemo-service-recommender-worker
    environment: dev
subjects:
- kind: ServiceAccount
  name: lemo-service-recommender-worker-sa
  namespace: lemo-dev
roleRef:
  kind: Role
  name: lemo-service-recommender-worker-role
  apiGroup: rbac.authorization.k8s.io
