# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from recommender.v1 import experiment_pb2 as recommender_dot_v1_dot_experiment__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in recommender/v1/experiment_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ExperimentServiceStub(object):
    """AB实验服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/CreateExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.CreateExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.CreateExperimentResponse.FromString,
                _registered_method=True)
        self.GetExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/GetExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResponse.FromString,
                _registered_method=True)
        self.ListExperiments = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/ListExperiments',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.ListExperimentsRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.ListExperimentsResponse.FromString,
                _registered_method=True)
        self.UpdateExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/UpdateExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.UpdateExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.UpdateExperimentResponse.FromString,
                _registered_method=True)
        self.DeleteExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/DeleteExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.FromString,
                _registered_method=True)
        self.StartExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/StartExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.StartExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.StartExperimentResponse.FromString,
                _registered_method=True)
        self.StopExperiment = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/StopExperiment',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.StopExperimentRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.StopExperimentResponse.FromString,
                _registered_method=True)
        self.GetExperimentResults = channel.unary_unary(
                '/lemo.recommender.v1.ExperimentService/GetExperimentResults',
                request_serializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsResponse.FromString,
                _registered_method=True)


class ExperimentServiceServicer(object):
    """AB实验服务
    """

    def CreateExperiment(self, request, context):
        """创建实验
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperiment(self, request, context):
        """获取实验详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExperiments(self, request, context):
        """查询实验列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExperiment(self, request, context):
        """更新实验
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
        """删除实验
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartExperiment(self, request, context):
        """启动实验
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExperiment(self, request, context):
        """停止实验
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentResults(self, request, context):
        """获取实验结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExperimentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.CreateExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.CreateExperimentResponse.SerializeToString,
            ),
            'GetExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResponse.SerializeToString,
            ),
            'ListExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExperiments,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.ListExperimentsRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.ListExperimentsResponse.SerializeToString,
            ),
            'UpdateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.UpdateExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.UpdateExperimentResponse.SerializeToString,
            ),
            'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.SerializeToString,
            ),
            'StartExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.StartExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.StartExperimentResponse.SerializeToString,
            ),
            'StopExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExperiment,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.StopExperimentRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.StopExperimentResponse.SerializeToString,
            ),
            'GetExperimentResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentResults,
                    request_deserializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lemo.recommender.v1.ExperimentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lemo.recommender.v1.ExperimentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ExperimentService(object):
    """AB实验服务
    """

    @staticmethod
    def CreateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/CreateExperiment',
            recommender_dot_v1_dot_experiment__pb2.CreateExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.CreateExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/GetExperiment',
            recommender_dot_v1_dot_experiment__pb2.GetExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.GetExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/ListExperiments',
            recommender_dot_v1_dot_experiment__pb2.ListExperimentsRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.ListExperimentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/UpdateExperiment',
            recommender_dot_v1_dot_experiment__pb2.UpdateExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.UpdateExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/DeleteExperiment',
            recommender_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/StartExperiment',
            recommender_dot_v1_dot_experiment__pb2.StartExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.StartExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/StopExperiment',
            recommender_dot_v1_dot_experiment__pb2.StopExperimentRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.StopExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperimentResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ExperimentService/GetExperimentResults',
            recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsRequest.SerializeToString,
            recommender_dot_v1_dot_experiment__pb2.GetExperimentResultsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
