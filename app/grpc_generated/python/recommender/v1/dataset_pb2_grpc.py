# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from recommender.v1 import dataset_pb2 as recommender_dot_v1_dot_dataset__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recommender/v1/dataset_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatasetServiceStub(object):
    """数据集服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDataset = channel.unary_unary(
                '/lemo.recommender.v1.DatasetService/CreateDataset',
                request_serializer=recommender_dot_v1_dot_dataset__pb2.CreateDatasetRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_dataset__pb2.CreateDatasetResponse.FromString,
                _registered_method=True)
        self.ListDatasets = channel.unary_unary(
                '/lemo.recommender.v1.DatasetService/ListDatasets',
                request_serializer=recommender_dot_v1_dot_dataset__pb2.ListDatasetsRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_dataset__pb2.ListDatasetsResponse.FromString,
                _registered_method=True)
        self.GetDataset = channel.unary_unary(
                '/lemo.recommender.v1.DatasetService/GetDataset',
                request_serializer=recommender_dot_v1_dot_dataset__pb2.GetDatasetRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_dataset__pb2.GetDatasetResponse.FromString,
                _registered_method=True)
        self.DeleteDataset = channel.unary_unary(
                '/lemo.recommender.v1.DatasetService/DeleteDataset',
                request_serializer=recommender_dot_v1_dot_dataset__pb2.DeleteDatasetRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_dataset__pb2.DeleteDatasetResponse.FromString,
                _registered_method=True)


class DatasetServiceServicer(object):
    """数据集服务
    """

    def CreateDataset(self, request, context):
        """创建数据集（注册已上传的文件）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasets(self, request, context):
        """获取数据集列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataset(self, request, context):
        """获取数据集详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDataset(self, request, context):
        """删除数据集
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatasetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataset,
                    request_deserializer=recommender_dot_v1_dot_dataset__pb2.CreateDatasetRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_dataset__pb2.CreateDatasetResponse.SerializeToString,
            ),
            'ListDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasets,
                    request_deserializer=recommender_dot_v1_dot_dataset__pb2.ListDatasetsRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_dataset__pb2.ListDatasetsResponse.SerializeToString,
            ),
            'GetDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataset,
                    request_deserializer=recommender_dot_v1_dot_dataset__pb2.GetDatasetRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_dataset__pb2.GetDatasetResponse.SerializeToString,
            ),
            'DeleteDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDataset,
                    request_deserializer=recommender_dot_v1_dot_dataset__pb2.DeleteDatasetRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_dataset__pb2.DeleteDatasetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lemo.recommender.v1.DatasetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lemo.recommender.v1.DatasetService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatasetService(object):
    """数据集服务
    """

    @staticmethod
    def CreateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.DatasetService/CreateDataset',
            recommender_dot_v1_dot_dataset__pb2.CreateDatasetRequest.SerializeToString,
            recommender_dot_v1_dot_dataset__pb2.CreateDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.DatasetService/ListDatasets',
            recommender_dot_v1_dot_dataset__pb2.ListDatasetsRequest.SerializeToString,
            recommender_dot_v1_dot_dataset__pb2.ListDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.DatasetService/GetDataset',
            recommender_dot_v1_dot_dataset__pb2.GetDatasetRequest.SerializeToString,
            recommender_dot_v1_dot_dataset__pb2.GetDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.DatasetService/DeleteDataset',
            recommender_dot_v1_dot_dataset__pb2.DeleteDatasetRequest.SerializeToString,
            recommender_dot_v1_dot_dataset__pb2.DeleteDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
