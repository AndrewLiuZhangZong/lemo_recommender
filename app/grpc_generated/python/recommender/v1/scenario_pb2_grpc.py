# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from recommender.v1 import scenario_pb2 as recommender_dot_v1_dot_scenario__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recommender/v1/scenario_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ScenarioServiceStub(object):
    """场景管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateScenario = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/CreateScenario',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.CreateScenarioRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.CreateScenarioResponse.FromString,
                _registered_method=True)
        self.GetScenario = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/GetScenario',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.GetScenarioRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.GetScenarioResponse.FromString,
                _registered_method=True)
        self.ListScenarios = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/ListScenarios',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.ListScenariosRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.ListScenariosResponse.FromString,
                _registered_method=True)
        self.UpdateScenario = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/UpdateScenario',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioResponse.FromString,
                _registered_method=True)
        self.DeleteScenario = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/DeleteScenario',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.DeleteScenarioRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.DeleteScenarioResponse.FromString,
                _registered_method=True)
        self.UpdateScenarioStatus = channel.unary_unary(
                '/lemo.recommender.v1.ScenarioService/UpdateScenarioStatus',
                request_serializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusResponse.FromString,
                _registered_method=True)


class ScenarioServiceServicer(object):
    """场景管理服务
    """

    def CreateScenario(self, request, context):
        """创建场景
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScenario(self, request, context):
        """获取场景详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListScenarios(self, request, context):
        """查询场景列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateScenario(self, request, context):
        """更新场景
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteScenario(self, request, context):
        """删除场景
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateScenarioStatus(self, request, context):
        """启用/禁用场景
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScenarioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateScenario,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.CreateScenarioRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.CreateScenarioResponse.SerializeToString,
            ),
            'GetScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScenario,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.GetScenarioRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.GetScenarioResponse.SerializeToString,
            ),
            'ListScenarios': grpc.unary_unary_rpc_method_handler(
                    servicer.ListScenarios,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.ListScenariosRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.ListScenariosResponse.SerializeToString,
            ),
            'UpdateScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateScenario,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioResponse.SerializeToString,
            ),
            'DeleteScenario': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteScenario,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.DeleteScenarioRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.DeleteScenarioResponse.SerializeToString,
            ),
            'UpdateScenarioStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateScenarioStatus,
                    request_deserializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lemo.recommender.v1.ScenarioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lemo.recommender.v1.ScenarioService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ScenarioService(object):
    """场景管理服务
    """

    @staticmethod
    def CreateScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/CreateScenario',
            recommender_dot_v1_dot_scenario__pb2.CreateScenarioRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.CreateScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/GetScenario',
            recommender_dot_v1_dot_scenario__pb2.GetScenarioRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.GetScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListScenarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/ListScenarios',
            recommender_dot_v1_dot_scenario__pb2.ListScenariosRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.ListScenariosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/UpdateScenario',
            recommender_dot_v1_dot_scenario__pb2.UpdateScenarioRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.UpdateScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteScenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/DeleteScenario',
            recommender_dot_v1_dot_scenario__pb2.DeleteScenarioRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.DeleteScenarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateScenarioStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.ScenarioService/UpdateScenarioStatus',
            recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusRequest.SerializeToString,
            recommender_dot_v1_dot_scenario__pb2.UpdateScenarioStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
