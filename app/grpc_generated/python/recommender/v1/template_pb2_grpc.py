# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from recommender.v1 import template_pb2 as recommender_dot_v1_dot_template__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recommender/v1/template_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TemplateServiceStub(object):
    """配置模板管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTemplate = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/CreateTemplate',
                request_serializer=recommender_dot_v1_dot_template__pb2.CreateTemplateRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.CreateTemplateResponse.FromString,
                _registered_method=True)
        self.GetTemplate = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/GetTemplate',
                request_serializer=recommender_dot_v1_dot_template__pb2.GetTemplateRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.GetTemplateResponse.FromString,
                _registered_method=True)
        self.ListTemplates = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/ListTemplates',
                request_serializer=recommender_dot_v1_dot_template__pb2.ListTemplatesRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.ListTemplatesResponse.FromString,
                _registered_method=True)
        self.UpdateTemplate = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/UpdateTemplate',
                request_serializer=recommender_dot_v1_dot_template__pb2.UpdateTemplateRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.UpdateTemplateResponse.FromString,
                _registered_method=True)
        self.DeleteTemplate = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/DeleteTemplate',
                request_serializer=recommender_dot_v1_dot_template__pb2.DeleteTemplateRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.DeleteTemplateResponse.FromString,
                _registered_method=True)
        self.GetTemplateByScenarioType = channel.unary_unary(
                '/lemo.recommender.v1.TemplateService/GetTemplateByScenarioType',
                request_serializer=recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeRequest.SerializeToString,
                response_deserializer=recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeResponse.FromString,
                _registered_method=True)


class TemplateServiceServicer(object):
    """配置模板管理服务
    """

    def CreateTemplate(self, request, context):
        """创建模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemplate(self, request, context):
        """获取模板详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTemplates(self, request, context):
        """查询模板列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTemplate(self, request, context):
        """更新模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTemplate(self, request, context):
        """删除模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemplateByScenarioType(self, request, context):
        """根据场景类型获取推荐模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemplateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTemplate,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.CreateTemplateRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.CreateTemplateResponse.SerializeToString,
            ),
            'GetTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemplate,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.GetTemplateRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.GetTemplateResponse.SerializeToString,
            ),
            'ListTemplates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTemplates,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.ListTemplatesRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.ListTemplatesResponse.SerializeToString,
            ),
            'UpdateTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTemplate,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.UpdateTemplateRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.UpdateTemplateResponse.SerializeToString,
            ),
            'DeleteTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTemplate,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.DeleteTemplateRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.DeleteTemplateResponse.SerializeToString,
            ),
            'GetTemplateByScenarioType': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemplateByScenarioType,
                    request_deserializer=recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeRequest.FromString,
                    response_serializer=recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lemo.recommender.v1.TemplateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lemo.recommender.v1.TemplateService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TemplateService(object):
    """配置模板管理服务
    """

    @staticmethod
    def CreateTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/CreateTemplate',
            recommender_dot_v1_dot_template__pb2.CreateTemplateRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.CreateTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/GetTemplate',
            recommender_dot_v1_dot_template__pb2.GetTemplateRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.GetTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTemplates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/ListTemplates',
            recommender_dot_v1_dot_template__pb2.ListTemplatesRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.ListTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/UpdateTemplate',
            recommender_dot_v1_dot_template__pb2.UpdateTemplateRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.UpdateTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/DeleteTemplate',
            recommender_dot_v1_dot_template__pb2.DeleteTemplateRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.DeleteTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTemplateByScenarioType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lemo.recommender.v1.TemplateService/GetTemplateByScenarioType',
            recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeRequest.SerializeToString,
            recommender_dot_v1_dot_template__pb2.GetTemplateByScenarioTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
