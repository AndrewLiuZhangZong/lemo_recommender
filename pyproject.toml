[tool.poetry]
name = "lemo-recommender"
version = "0.1.0"
description = "多场景SaaS推荐系统"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.10"
# Web框架
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# 数据库
motor = "^3.3.2"  # MongoDB异步驱动
pymongo = "^4.6.1"
redis = {extras = ["hiredis"], version = "^5.0.1"}

# 消息队列与流处理
kafka-python = "^2.0.2"  # 同步 Kafka 客户端（用于 Celery 等）
aiokafka = "^0.8.1"  # 异步 Kafka 客户端（用于 Consumer 服务）
# apache-flink = "^1.17.0"  # Flink Python API (独立部署,不需要在API服务中)

# ClickHouse (可选，数据分析必需)
clickhouse-driver = {version = "^0.2.7", optional = true}

# 任务调度
celery = {extras = ["redis"], version = "^5.3.4"}
celery-redbeat = "^2.2.0"  # Redis 调度状态存储（Beat 服务必需）

# 推荐算法
scikit-learn = "^1.4.0"
numpy = "^1.26.3"
pandas = "^2.1.4"
scipy = "^1.11.4"
lightgbm = "^4.2.0"
xgboost = "^2.0.3"
implicit = "^0.7.2"
# scikit-surprise = "^1.1.3"  # 需要编译，可选
faiss-cpu = "^1.7.4"  # 向量相似度搜索

# 深度学习（可选）
torch = {version = "^2.1.2", optional = true}
tensorflow = {version = "^2.15.0", optional = true}

# gRPC
grpcio = "^1.68.0"
grpcio-tools = "^1.68.0"
protobuf = "^5.29.0"

# 监控与日志
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
loguru = "^0.7.2"

# 工具库
pydantic-extra-types = "^2.4.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
httpx = "^0.26.0"
aiofiles = "^23.2.1"

[tool.poetry.group.dev.dependencies]
# 代码质量
black = "^23.12.1"
flake8 = "^7.0.0"
mypy = "^1.8.0"
isort = "^5.13.2"
pylint = "^3.0.3"

# 测试
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"

# 开发工具
ipython = "^8.19.0"
pre-commit = "^3.6.0"

[tool.poetry.extras]
torch = ["torch"]
tensorflow = ["tensorflow"]
all = ["torch", "tensorflow"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

